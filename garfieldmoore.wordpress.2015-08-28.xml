<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2015-08-28 13:54"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Garfield Moore</title>
<link>http://garfieldmoore.co.uk</link>
<description/>
<pubDate>Fri, 28 Aug 2015 13:54:13 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://garfieldmoore.co.uk</wp:base_blog_url>
<wp:author>
  <wp:author_login>garfieldmoore</wp:author_login>
  <wp:author_email>garfieldmoore@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[Garfield Moore]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>2427</wp:term_id>
  <wp:category_nicename>net</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[.Net]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>163615</wp:term_id>
  <wp:category_nicename>continuous-integration</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Continuous Integration]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>209196</wp:term_id>
  <wp:category_nicename>git</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Git]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>32</wp:term_id>
  <wp:category_nicename>infrastructure</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Infrastructure]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>52631998</wp:term_id>
  <wp:category_nicename>objectflow</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Objectflow]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>955</wp:term_id>
  <wp:category_nicename>stories</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Stories]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>76604</wp:term_id>
  <wp:category_nicename>tdd</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[TDD]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>3952442</wp:term_id>
  <wp:category_nicename>teamcity</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[TeamCity]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>12</wp:term_id>
  <wp:category_nicename>testing</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Testing]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>303624</wp:term_id>
  <wp:category_nicename>user-stories</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[User Stories]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>800</wp:term_id>
  <wp:category_nicename>windows</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Windows]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>2427</wp:term_id>
  <wp:tag_slug>net</wp:tag_slug>
  <wp:tag_name><![CDATA[.Net]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>197590733</wp:term_id>
  <wp:tag_slug>net-tdd-poka-yoke</wp:tag_slug>
  <wp:tag_name><![CDATA[.Net TDD poka-yoke]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11287</wp:term_id>
  <wp:tag_slug>agile</wp:tag_slug>
  <wp:tag_name><![CDATA[Agile]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>75400</wp:term_id>
  <wp:tag_slug>bdd</wp:tag_slug>
  <wp:tag_name><![CDATA[BDD]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>39104</wp:term_id>
  <wp:tag_slug>ci</wp:tag_slug>
  <wp:tag_name><![CDATA[CI]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28070474</wp:term_id>
  <wp:tag_slug>devops</wp:tag_slug>
  <wp:tag_name><![CDATA[devops]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>209196</wp:term_id>
  <wp:tag_slug>git</wp:tag_slug>
  <wp:tag_name><![CDATA[Git]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10518</wp:term_id>
  <wp:tag_slug>http</wp:tag_slug>
  <wp:tag_name><![CDATA[http]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2660314</wp:term_id>
  <wp:tag_slug>hyper-v</wp:tag_slug>
  <wp:tag_name><![CDATA[Hyper-V]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>197592200</wp:term_id>
  <wp:tag_slug>objectflow-2</wp:tag_slug>
  <wp:tag_name><![CDATA[objectflow]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>888660</wp:term_id>
  <wp:tag_slug>poka-yoke</wp:tag_slug>
  <wp:tag_name><![CDATA[poka-yoke]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>566122</wp:term_id>
  <wp:tag_slug>serialization</wp:tag_slug>
  <wp:tag_name><![CDATA[Serialization]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1143077</wp:term_id>
  <wp:tag_slug>server-2008</wp:tag_slug>
  <wp:tag_name><![CDATA[Server 2008]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>73745084</wp:term_id>
  <wp:tag_slug>server-2012</wp:tag_slug>
  <wp:tag_name><![CDATA[Server 2012]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>955</wp:term_id>
  <wp:tag_slug>stories</wp:tag_slug>
  <wp:tag_name><![CDATA[Stories]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>76604</wp:term_id>
  <wp:tag_slug>tdd</wp:tag_slug>
  <wp:tag_name><![CDATA[TDD]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12</wp:term_id>
  <wp:tag_slug>testing</wp:tag_slug>
  <wp:tag_name><![CDATA[Testing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1981</wp:term_id>
  <wp:tag_slug>tools</wp:tag_slug>
  <wp:tag_name><![CDATA[Tools]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>42722</wp:term_id>
  <wp:tag_slug>vcs</wp:tag_slug>
  <wp:tag_name><![CDATA[VCS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>800</wp:term_id>
  <wp:tag_slug>windows</wp:tag_slug>
  <wp:tag_name><![CDATA[Windows]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>18187</wp:term_id>
  <wp:tag_slug>workflow</wp:tag_slug>
  <wp:tag_name><![CDATA[workflow]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title> &#187; Garfield Moore</title>
		<link>http://garfieldmoore.co.uk</link>
	</image>
	<item>
  <title>Developers are not customers</title>
  <link>http://garfieldmoore.co.uk/2011/02/09/developers-are-not-customers/</link>
  <pubDate>Wed, 09 Feb 2011 21:23:43 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=4</guid>
  <description/>
  <content:encoded><![CDATA[I've been on a number of projects that used 'Technical' user stories.  One incarnation of the 'technical story' I saw on a recent project was the technical debt story.  It went something like this;

'As a developer, I want to handle exceptional cases, so that the software it resilient'

With a little digging it transpired that the previous iterations stories had been developed without accounting for possible failures due to unavailable resources (networks, databases etc).

The often quoted definition of done is 'The simplest thing that works'.  Dan North elaborated this as '...with a sustainable eco-system...' [of code].

So it seems to me that these developer stories existed because the previous stories had been completed without this sustainable foundation.

As developers, we are being paid to produce software (by our customers).  Therefore, any story that has the developer as the role should be viewed with suspicion.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4</wp:post_id>
  <wp:post_date>2011-02-09 21:23:43</wp:post_date>
  <wp:post_date_gmt>2011-02-09 21:23:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>developers-are-not-customers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
  <category domain="post_tag" nicename="stories"><![CDATA[Stories]]></category>
  <category domain="category" nicename="user-stories"><![CDATA[User Stories]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Leon]]></wp:comment_author>
    <wp:comment_author_email>leon.hewitt@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>109.174.138.14</wp:comment_author_IP>
    <wp:comment_date>2011-02-10 09:44:12</wp:comment_date>
    <wp:comment_date_gmt>2011-02-10 09:44:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Even if you allow for the fact that the  'sustainable eco-system' requirement for 'done' was missed, its still the customer who wants the system to be resiliant to such failures. So naturally the customer in this story would be the same as the customer in the previous stories. There's always a chance requirements like this are missed, but if you're working iteratively it allows the customer to write stories to resolve this.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1297331053.2042";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1297342345.2941";s:7:"message";s:52:"garfieldmoore changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"garfieldmoore";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-02-10 09:44:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[Garfield Moore]]></wp:comment_author>
    <wp:comment_author_email>garfieldmoore@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://garfieldmoore.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>90.213.210.34</wp:comment_author_IP>
    <wp:comment_date>2012-05-03 01:36:22</wp:comment_date>
    <wp:comment_date_gmt>2012-05-03 01:36:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes, the developer story is wrong because the requirement comes from the customer. I think it reasonable customers would assume a basic level of non-functional requirements, like resiliency, would be met.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>20508111</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1336008982</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1336008982.7245";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:13:"garfieldmoore";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-05-03 01:36:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>No customers</title>
  <link>http://garfieldmoore.co.uk/2011/02/12/implicit-customers/</link>
  <pubDate>Sat, 12 Feb 2011 11:07:41 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=26</guid>
  <description/>
  <content:encoded><![CDATA[Here's another story pattern I often see;

'<em>As a business</em> I want [goal] so that [value]'

Not identifying the stakeholder introduces a couple of barriers to delivering software.

Arguably the most significant is that you have missed the opportunity to learn something about the business.  Understanding the context  improves our ability to deliver software quickly (<em>and therefore be more cost effective</em>).

Reducing our ignorance and gaining a better understanding of our customers can only improve our effectiveness of delivering software.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2011-02-12 11:07:41</wp:post_date>
  <wp:post_date_gmt>2011-02-12 11:07:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>implicit-customers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
  <category domain="post_tag" nicename="stories"><![CDATA[Stories]]></category>
  <category domain="category" nicename="user-stories"><![CDATA[User Stories]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tests</title>
  <link>http://garfieldmoore.co.uk/?p=37</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=37</guid>
  <description/>
  <content:encoded><![CDATA[<div>Tests should exhibit symetric change attributes;  A small code change results in a small change to our tests.  Likewise, a small change to the tests should require a small code change.</div>
<div>By contrast, if we see asymemetric changes it means our tests are brittle and we'll spend more and more time refactoring tests.</div>
<div>One reason for brittle tests is a failure to recognise different levels of testing;</div>
<div>Business</div>
<div>Workflow</div>
<div>Technical Activity</div>
<div>A change in the workflow should not break a business test.  Decoupling tests in this way makes them more amenable to change.</div>
<div>It is usually quite easy to see what level a test is because the clarity of a tests decreases as it moves down the list.</div>
<div>A business test is an acceptance test that documents a feature.  These are written in the domain language and created in collaboration with the customer.  These tests change infrequently and are easily understood.</div>
<div>Workflow tests change more frequently and although often understood by the customer are more technical and often at the component level.  These change less often.</div>
<div>Technical activity tests have the least clarity and rarely understood without technical knowledge.  These also change the most frequently.test</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2012-04-30 21:44:34</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Configuring remote access</title>
  <link>http://garfieldmoore.co.uk/2011/07/08/configuring-remote-access/</link>
  <pubDate>Fri, 08 Jul 2011 08:24:35 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=42</guid>
  <description/>
  <content:encoded><![CDATA[After setting up the project build in TeamCity (on MS Winows), I wanted to allow access from the browser.  This is done over https and requires tomcat to be configured.  This is simple but the documentation is confusing.

1. Create a certificate using the keytool command.
<pre>%JAVA_HOME%\bin\keytool -genkey -alias tomcat -keyalg RSA</pre>
The passphrase for the certificate and the containde should be the same due to a TomCat limitation.

2 Add the followng section to the server.xml file located in C:\TeamCity\conf
<pre>	&lt;Connector
           port="8443" maxThreads="200"
           scheme="https" secure="true" SSLEnabled="true"
           keystoreFile="${user.home}/.keystore" keystorePass="[password]"
           clientAuth="false" sslProtocol="TLS"/&gt;</pre>
You can test the configuration by browsing to https://localhost:8443 from the teamcity server.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2011-07-08 08:24:35</wp:post_date>
  <wp:post_date_gmt>2011-07-08 08:24:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>configuring-remote-access</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ci"><![CDATA[CI]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>deploying often</title>
  <link>http://garfieldmoore.co.uk/2011/07/19/deploying-often/</link>
  <pubDate>Tue, 19 Jul 2011 20:09:18 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=61</guid>
  <description/>
  <content:encoded><![CDATA[I've read a lot about blue/green deployments recently.

But how is the switch done between your old and new websites?  More importantly, how can I do it easily without complicated proxies and fail-over technologies?

One method that occurred to me is to lower your dns time to live (TTL), change the dns name record to point to the new software, if the new software disrupts service, change it back and your website is back online.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>61</wp:post_id>
  <wp:post_date>2011-07-19 20:09:18</wp:post_date>
  <wp:post_date_gmt>2011-07-19 20:09:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>deploying-often</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
  <category domain="post_tag" nicename="ci"><![CDATA[CI]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tools for pairing</title>
  <link>http://garfieldmoore.co.uk/2012/04/30/tools-for-pairing/</link>
  <pubDate>Mon, 30 Apr 2012 21:59:45 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=64</guid>
  <description/>
  <content:encoded><![CDATA[I noticed a developer using  <a title="ZoomIt" href="http://technet.microsoft.com/en-us/sysinternals/bb897434">ZoomIt </a>from the <a title="Sysinternals Suite" href="http://technet.microsoft.com/en-us/sysinternals/bb842062">SysInternals Suite</a>.

This is a great tool that can be used to to improve communicating when pairing with a dual screen setup.

This tool can be used to highlight something on the screen to your pair.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>64</wp:post_id>
  <wp:post_date>2012-04-30 21:59:45</wp:post_date>
  <wp:post_date_gmt>2012-04-30 21:59:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tools-for-pairing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
  <category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Accessing github through a http proxy</title>
  <link>http://garfieldmoore.co.uk/2012/05/01/accessing-github-through-a-http-proxy/</link>
  <pubDate>Tue, 01 May 2012 19:44:15 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=72</guid>
  <description/>
  <content:encoded><![CDATA[Accessing gitub can be difficult at work;  ssh tunneling is often blocked by firewalls and proxies make it difficult to use http.

The solution is to set the http_proxy environment variable;

export http_proxy=[PROXY_SETTING]

You can now clone a public git repository over http.

However, this is only half the solution as private repositories use https so this setting doesn't work.

The solution is the similar https_proxy environment variable.  Set this with the below command;

export https_proxy=[PROXY_SETTING]

You can now clone public and private repositories with http and https through your companies proxy.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>72</wp:post_id>
  <wp:post_date>2012-05-01 19:44:15</wp:post_date>
  <wp:post_date_gmt>2012-05-01 19:44:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>accessing-github-through-a-http-proxy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="git"><![CDATA[Git]]></category>
  <category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[samxs]]></wp:comment_author>
    <wp:comment_author_email>samueljohnksj@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>183.83.56.23</wp:comment_author_IP>
    <wp:comment_date>2012-05-04 03:25:47</wp:comment_date>
    <wp:comment_date_gmt>2012-05-04 03:25:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[you can use transconnect easily and which can be downloaded from http://transconnect.sourceforge.net/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>5530235</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1336101948.1458";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"samxs";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1336115810</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1336115810.7115";s:7:"message";s:52:"garfieldmoore changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"garfieldmoore";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-05-04 03:25:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>About me</title>
  <link>http://garfieldmoore.co.uk/about-me/</link>
  <pubDate>Thu, 03 May 2012 02:02:41 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?page_id=75</guid>
  <description/>
  <content:encoded><![CDATA[I started programming back in the early 80's using Z80, &amp; 6502 assembler. I now specialise in continuous deployment, software architecture, and agile development practises.

When not programming I can be found in South East London with my partner, two lovely daughters and our assortment of cats, snakes and spiders]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>75</wp:post_id>
  <wp:post_date>2012-05-03 02:02:41</wp:post_date>
  <wp:post_date_gmt>2012-05-03 02:02:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>about-me</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Incidental customers</title>
  <link>http://garfieldmoore.co.uk/2012/05/03/incidental-customers/</link>
  <pubDate>Thu, 03 May 2012 20:01:02 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=85</guid>
  <description/>
  <content:encoded><![CDATA[Consider the following story;

<em>As a web master, I want a captcha so that we reduce spam</em>

This looks like a reasonable story.  However, I think there is a problem with this story - the web master role is incidental.

What I mean is the web master role is incidental to the implementation technology.  If we changed the technology we implemented our solution in the role of web master would be replaced.

However, the requirement to reduce spam by some sort of manual input (captcha) would remain.

The real customer in this example could be the marketing department or customer service who don't want to waste time on customers that aren't real.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>85</wp:post_id>
  <wp:post_date>2012-05-03 20:01:02</wp:post_date>
  <wp:post_date_gmt>2012-05-03 20:01:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>incidental-customers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
  <category domain="post_tag" nicename="stories"><![CDATA[Stories]]></category>
  <category domain="category" nicename="user-stories"><![CDATA[User Stories]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>less typing on git command line</title>
  <link>http://garfieldmoore.co.uk/2012/08/22/less-typing-in-git-console/</link>
  <pubDate>Wed, 22 Aug 2012 20:52:16 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=88</guid>
  <description/>
  <content:encoded><![CDATA[If you're tired of typing git commands you can set aliases for your favourites.

enter the following command while on the git command line;

git config --global alias.down pull

You can now type 'git down' instead of 'git pull' as this command creates an alias for pull called 'down'.

Here's a few other examples of mine;

<strong>git st =&gt; git status</strong>

git config --global alias.st status

<strong>git co =&gt; git commit</strong>

<strong>git commit =&gt; git co</strong>

git config --global alias.co commit %1

<strong>git push =&gt; git up</strong>

git config --global alias.up push origin master]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>88</wp:post_id>
  <wp:post_date>2012-08-22 20:52:16</wp:post_date>
  <wp:post_date_gmt>2012-08-22 20:52:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>less-typing-in-git-console</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="git"><![CDATA[Git]]></category>
  <category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[Tools]]></category>
  <category domain="post_tag" nicename="vcs"><![CDATA[VCS]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>running tests all the time</title>
  <link>http://garfieldmoore.co.uk/2012/08/22/running-tests-all-the-time/</link>
  <pubDate>Wed, 22 Aug 2012 21:19:27 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=94</guid>
  <description/>
  <content:encoded><![CDATA[I've been using a great TDD tool called ncrunch (<a href="http://www.ncrunch.net/">http://www.ncrunch.net/</a>)

It's a Visual Studio add-in that automatically runs tests in the background. It analyses your code changes and runs the affected tests.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>94</wp:post_id>
  <wp:post_date>2012-08-22 21:19:27</wp:post_date>
  <wp:post_date_gmt>2012-08-22 21:19:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>running-tests-all-the-time</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_108d412c755c22a0998fdd5e80c97a86</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Exception handling </title>
  <link>http://garfieldmoore.co.uk/2012/09/05/exception-handling/</link>
  <pubDate>Wed, 05 Sep 2012 20:09:12 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=99</guid>
  <description/>
  <content:encoded><![CDATA[I've added exception handling into the latest release (1.4.x).  This allows you to specify exception handling policies as below;
<pre>var workflow = new Workflow&lt;string&gt;();

workflow.Configure()
	.On&lt;Exception&gt;(MyExceptionHandler)
	.On&lt;NotImplementedException&gt;(MyNotIMplementedHandler)
	.When().Do(...)</pre>
The When&lt;T&gt;() method closes the definition of exception handlers and you can then define the workflow as usual.  The T in the when clause should match the type of workflow defined.  In this case, string.

My original attempt at handling errors by catching them and setting the operation's success status to false was a bit of a mistake.  I allowed this behaviour to be over-ridden as I could see problems.

I've decided to break the backward compatibility as this previous exception handling mechanism was implemented under time pressure (work and family related) and this is how I envisioned it working initially.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>99</wp:post_id>
  <wp:post_date>2012-09-05 20:09:12</wp:post_date>
  <wp:post_date_gmt>2012-09-05 20:09:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>exception-handling</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="objectflow"><![CDATA[Objectflow]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[Eduardo de Souza]]></wp:comment_author>
    <wp:comment_author_email>reaper@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>177.135.122.66</wp:comment_author_IP>
    <wp:comment_date>2013-05-22 15:03:50</wp:comment_date>
    <wp:comment_date_gmt>2013-05-22 15:03:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How can I read the exception message? If I try to include a parameter to the Action handler, it throws an error.
Thanks]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1369235031.1896550655364990234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1380310458</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1380310458.1720058917999267578125;s:7:"message";s:52:"garfieldmoore changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"garfieldmoore";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-22 15:03:50</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Now in nuget</title>
  <link>http://garfieldmoore.co.uk/2012/09/05/now-in-nuget/</link>
  <pubDate>Wed, 05 Sep 2012 20:12:55 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=112</guid>
  <description/>
  <content:encoded><![CDATA[The latest version can be installed via the NuGet gallery. In the Visual Studio package console window;

Install-Package objectflow.core -pre]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>112</wp:post_id>
  <wp:post_date>2012-09-05 20:12:55</wp:post_date>
  <wp:post_date_gmt>2012-09-05 20:12:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>now-in-nuget</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="objectflow"><![CDATA[Objectflow]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Simple workflows</title>
  <link>http://garfieldmoore.co.uk/2012/09/10/simple-workflows/</link>
  <pubDate>Mon, 10 Sep 2012 20:42:28 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=118</guid>
  <description/>
  <content:encoded><![CDATA[It's simple to define workflows declaratively;
<pre style="padding-left:30px;">var customerWorkflow = Workflow&lt;CustomerState&gt;.Definition()
    .Configure()
    .On&lt;Exception&gt;(() =&gt; Console.WriteLine("Caught an exception"))
    .When&lt;CustomerState&gt;()
    .Do&lt;PlaceOrder&gt;()
    .Do&lt;PayForCoffee&gt;()
    .Do&lt;PickUp&gt;();</pre>
The above workflow defines the ubiquitous Starbucks example.  The customer states are defined by the below class;
<pre style="padding-left:30px;">public class CustomerState 
{     
public bool OrderPlaced { get; set; }     
public bool Paid { get; set; }     
public bool DrinkReceived { get; set; }
}</pre>
Now the workflow steps can be defined as Operations on CustomerState;
<pre style="padding-left:30px;">public class PlaceOrder : BasicOperation&lt;CustomerState&gt;
{
    public override CustomerState Execute(CustomerState data)
    {
        Console.WriteLine("Place order;");
        data.OrderPlaced = true;
        return data;
    }
}</pre>
When starting the workflow the parameterised start method should be used;
<pre>var endState = customerWorkflow.Start(new CustomerState());</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>118</wp:post_id>
  <wp:post_date>2012-09-10 20:42:28</wp:post_date>
  <wp:post_date_gmt>2012-09-10 20:42:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>simple-workflows</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="objectflow"><![CDATA[Objectflow]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Re-using workflow definitions</title>
  <link>http://garfieldmoore.co.uk/2012/09/11/re-using-workflow-definitions/</link>
  <pubDate>Tue, 11 Sep 2012 19:56:45 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=122</guid>
  <description/>
  <content:encoded><![CDATA[In the last post I showed how to define a workflow;
<pre style="padding-left:30px;">var workflow = Workflow&lt;CustomerState&gt;.Definition()
  .Configure()
  .On&lt;Exception&gt;(() =&gt; Console.WriteLine("Caught an exception"))
  .When&lt;CustomerState&gt;()
  .Do&lt;PlaceOrder&gt;()
  .Do&lt;PayForCoffee&gt;()
  .Do&lt;PickUp&gt;();</pre>
Although this is fine for defining small workflows, this would be cumbersome for more complex workflows.

The frameworks AsAWorkflow&lt;T&gt; abstract class solves this problem.  All we have to do is create a derived class and copy the above code into the Configure() method;
<pre style="padding-left:30px;">public class CoffeeCustomerService : AsAWorkflow&lt;CustomerState&gt;
{
    // Obsolete contructor
    public CoffeeCustomerService(IDefine&lt;CustomerState&gt; workflow) : base(workflow)
    {
    }

    // Obsolete method
    public override void Configure(IDefine&lt;CustomerState&gt; workflow)
    {
    }

    public override IWorkflow&lt;CustomerState&gt; Configure()
    {
        return Workflow&lt;CustomerState&gt;.Definition()
          .Configure()
            .On&lt;Exception&gt;(() =&gt; Console.WriteLine("Caught an exception"))
            .When&lt;CustomerState&gt;()
            .Do&lt;PlaceOrder&gt;()
            .Do&lt;PayForCoffee&gt;()
            .Do&lt;PickUp&gt;();
     }
}</pre>
The constructor and parameterised Configure method are obsolete and will be removed in a future release.  The workflow is defined in the Configure() method as usual.

All the client has to do is instantiate this class and pass the initial state to the start method;
<pre style="padding-left:30px;">var coffeeCustomerWorkflow = new CoffeeCustomerService(new Workflow&lt;CustomerState&gt;());
var customerState = new CustomerState();
coffeeCustomerWorkflow.Start(customerState);</pre>
This is a bit tidier and more re-useable.

The next minor release will have a default constructor for this class as we plan to obsolete the parameterized constructor.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>122</wp:post_id>
  <wp:post_date>2012-09-11 19:56:45</wp:post_date>
  <wp:post_date_gmt>2012-09-11 19:56:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>re-using-workflow-definitions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="objectflow"><![CDATA[Objectflow]]></category>
  <category domain="post_tag" nicename="objectflow-2"><![CDATA[objectflow]]></category>
  <category domain="post_tag" nicename="workflow"><![CDATA[workflow]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing serialization</title>
  <link>http://garfieldmoore.co.uk/2013/04/19/serialising-objects/</link>
  <pubDate>Fri, 19 Apr 2013 20:38:53 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=130</guid>
  <description/>
  <content:encoded><![CDATA[A common problem I see is broken integration tests because objects can’t be serialised across service boundaries. It’s easy to forget to decorate a class or property with the DataContract attribute.

Catching this during integration tests can lead to large slow running test suites and wasted time troubleshooting, as it is rarely obvious what has the issue is.

One goal of continuous integration is to catch errors as early in the process as possible and it turns out this can be caught during unit tests.

It’s simple to add unit tests to ensure a class or property is decorated with the correct attribute;
<pre>[Test]     
public void DataMembersSetAsExpected()   
  {            
       var type = typeof(BankAccount);           
       Assert.That(type.IsDefined(
            typeof(System.Runtime.Serialization.DataContractAttribute), true));
       CheckForDataMemberAttribute(type, "SortCode"); 
  }
  private static void CheckForDataMemberAttribute(Type type, string property)
      {
          var idProperty = type.GetProperty(property);
          Assert.That(idProperty.IsDefined(
             typeof (System.Runtime.Serialization.DataMemberAttribute), true));
        }
    }</pre>
The main problem with this implementation is developers need to remember to update the test when a new property is added or removed.

It would be simple to refactor this to check all properties on a class using reflection.

However, this isn’t ideal as it will lead to false negatives as properties that won’t be serialised are still checked.

The approach I’ve adopted is to use the DataContractSerialiser to test if an object can serialised;
<pre>    [Test]
    public void Should_Serialise_across_service_boundary()
    {
        var s = new DataContractSerializer(typeof(BankAccount));
        var account = new BankAccount() { Owner = new Person() };
        s.WriteObject(new MemoryStream(), account);
    }</pre>
This has the advantage that it will only test properties that will be serialised and developers don’t have to remember to change the test when adding or removing properties.
<h2>Conclusion</h2>
Testing objects can be serialised in integration tests results in slow test suites and fails to catch the defect as early as possible.

One approach to unit testing serialisation is to verify classes have been decorated with the DataContract and DataMember attributes.

However, this leads to false positives when developers forget to refactor tests when adding properties.

The approach I am currently using it to use the DataContractSerialiser class to ensure a class instance can be successfully serialised.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>130</wp:post_id>
  <wp:post_date>2013-04-19 20:38:53</wp:post_date>
  <wp:post_date_gmt>2013-04-19 20:38:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>serialising-objects</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.Net]]></category>
  <category domain="post_tag" nicename="serialization"><![CDATA[Serialization]]></category>
  <category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>14</wp:comment_id>
    <wp:comment_author><![CDATA[Testing serialization part II | Garfield Moore]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://garfieldmoore.co.uk/2013/10/02/testing-serialization-part-ii/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.38.41</wp:comment_author_IP>
    <wp:comment_date>2013-10-02 22:10:08</wp:comment_date>
    <wp:comment_date_gmt>2013-10-02 22:10:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] previous post on testing serialization was in-complete.  Also, since then my tests have evolved enough to warrant another post (at least [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1380751808.1159179210662841796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1380752565</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1380752565.5171680450439453125;s:7:"message";s:52:"garfieldmoore changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"garfieldmoore";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-10-02 22:10:08</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>unit testing concurrency</title>
  <link>http://garfieldmoore.co.uk/?p=183</link>
  <pubDate>Wed, 24 Apr 2013 08:51:40 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=183</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>183</wp:post_id>
  <wp:post_date>2013-04-24 08:51:40</wp:post_date>
  <wp:post_date_gmt>2013-04-24 08:51:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Reading Xml files</title>
  <link>http://garfieldmoore.co.uk/2013/09/30/reading-xml-files/</link>
  <pubDate>Mon, 30 Sep 2013 11:08:18 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.wordpress.com/?p=185</guid>
  <description/>
  <content:encoded><![CDATA[<p>On a recent project we needed to read data from a file. We couldn't simply de-serialize using the built in .net serialization as the file format had already been defined and we didn't have the time to write custom serialization. So our problem was that given an xml file format such as the one below, how best to consume it? <code></code></p><pre style="padding-left:30px;">&lt;Products&gt;
&lt;Product name="Name1" manufacturer="Manufacturer1"/&gt;
&lt;Product  name="Name2" manufacturer=""Manufacturer2"/&gt;
&lt;/Products&gt;</pre><p>This had been solved in a few places by using an xml parser. I didn't like this as it seemed fragile. </p><p><strong style="color:#2b6fb6;font-size:1.5em;">Auto generate classes</strong> </p><p>After some thought I realised we could create the classes from the xml using the xml schema definition tool. First create an xml schema from the visual studio command prompt using xsd.exe;</p><pre style="padding-left:30px;">xsd.exe products.xml</pre><p>Then we create the classes from the schema;</p><pre style="padding-left:30px;">xsd.exe /classes products.xsd</pre><p><strong style="color:#2b6fb6;font-size:1.5em;">Deserialize files into objects</strong> </p><p>We now have the classes required to de-serialize the file into .net objects.  The below code and utility class can now handle the de-serialization;</p><pre style="padding-left:30px;">[Test]
public void Should_load_products()
{
     var p = new XmlEntityReader&lt;Products&gt;();
     var productList = p.Read("blog\\productdata.xml");

     productList.Items.Length.ShouldBe(2);
}

public class XmlEntityReader&lt;T&gt; where T : class
{
    public T Read(string storeFullPath)
    {
       return Read(new FileStream(storeFullPath, FileMode.Open));
    }

    public T Read(Stream storeStream)
    {  
        storeStream.Position = 0;
        T settings;
        var serializer = new XmlSerializer(typeof(T));
        using (TextReader tr = new StreamReader(storeStream))
        {
           settings = serializer.Deserialize(tr) as T;
           tr.Close();
        }
        return settings;
    }
}</pre><p> </p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>185</wp:post_id>
  <wp:post_date>2013-09-30 11:08:18</wp:post_date>
  <wp:post_date_gmt>2013-09-30 11:08:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>reading-xml-files</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="post_tag" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/qoITuF8BOq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:20430620;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=20952117&stype=M&topic=5790891063791079424&type=U&a=4RLL]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing serialization part II</title>
  <link>http://garfieldmoore.co.uk/2013/10/02/testing-serialization-part-ii/</link>
  <pubDate>Wed, 02 Oct 2013 22:10:03 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=211</guid>
  <description/>
  <content:encoded><![CDATA[My previous post on <a title="testing serialization" href="http://garfieldmoore.co.uk/2013/04/19/serialising-objects/">testing serialization</a> was in-complete.  Since then my tests have evolved enough to warrant another post (at least I think so).

Here's the excerpt from my previous post;
<pre style="padding-left:30px;"><code>[Test]
public void Should_Serialise_across_service_boundary()
{
    var s = new DataContractSerializer(typeof(BankAccount));
    var account = new BankAccount() { Owner = new Person() };
    s.WriteObject(new MemoryStream(), account);
}
</code></pre>
So, what are the shortcomings I'd like to address?
<ul>
	<li>The test doesn't assert anything. As long as the serializer doesn't throw an exception, the test passes</li>
	<li>It isn't particuarly readable and we'll probably end up with a lot of code duplication</li>
</ul>
However, before addressing the above issues I'd like to explain why we became interested in testing serialisation and how we failed to solve this previously.
<h2>Motivation</h2>
Unlike my normal tests this is not a TDD practise.  TDD is about driving your design through tests.  This is not my motivation for doing this type of test.

<em>These tests are supporting continuous integration by providing early feedback.
</em>
On the project I was designing at the time we'd spent some time tracking down the cause of defects that turned out to be serialization issues.
<h2>First attempt</h2>
To address this we starting creating a comprehensive set of integration and acceptance tests. However, these took too long to run and we realised things would only get worse as our system grew.

Also, detecting these problems in integration tests increases the feedback loop. This is bad. It would be much better to find these problems sooner - preferably in unit tests.
<h2>Unit testing serialization</h2>
So let's get back to the tests.

Take the following classes;
<pre style="padding-left:30px;"><code>public class BankAccount
{
    public string AccountNumber { get; set; }
    public string SortCode { get; set; }
    public Person Owner { get; set;}

public class Person
{
    public string Name { get; set; }
    public DateTime DateOfBirth { get; set; }
}
</code></pre>
BankAccount and Person are simple classes, so I'm confident this will serialize correctly.

Now, how about after refactoring this to use interfaces;
<pre style="padding-left:30px;"><code>public class BankAccount
{
    public string AccountNumber { get; set; }
    public string SortCode { get; set; }
    public IParty Owner { get; set; }
}

public class Person : IParty
{
    public string Name { get; set; }
    public DateTime DateOfBirth { get; protected set; }
}

public interface IParty
{
    string Name { get; set; }
}
</code></pre>
This will now fail as the serializer has no knowledge of the interface and the Person's DateOfBirth property has a protected setter.

So here's my test;
<pre style="padding-left:30px;"><code>[Test]
 public void Should_Serialise_across_service_boundary()
 {
     GivenBankAccount();
     GivenAccountHasBeenSerialised();
     WhenDeserializingFromStream();

     ThenAllPropertiesShouldBeSet();
  }
</code></pre>
I like to refactor my test code into methods to reduce noise and increase the intent on the code.  this makes it easier to understand them later. The Givens sets up the scenario I am testing;
<pre style="padding-left:30px;"><code>private void GivenBankAccount()
{
    account = Builder&lt;BancAccount&gt;.CreateNew().Build();
    person = Builder&lt;Person&gt;.CreateNew().Build();
    account.Owner = person;
}
</code></pre>
<pre style="padding-left:30px;"><code>private void GivenAccountHasBeenSerialised()
{
    storeStream = new MemoryStream();
    serializer = new DataContractSerializer(typeof(BankAccount));
    serializer.WriteObject(storeStream, account);
}
</code></pre>
The When..() method deserializes the stream back into a BankAccount instance;
<pre style="padding-left:30px;"><code>private void WhenDeserializingFromStream()
{
    storeStream.Position = 0;
    savedAccountDetails = this.serializer.ReadObject(storeStream) as BankAccount;
}
</code></pre>
And finally, we test the deserialized object's properties are the same as the original;
<pre style="padding-left:30px;"><code>private void ThenAllPropertiesShouldBeSet()
{
    savedAccountDetails.ShouldNotBe(null); 
    savedAccountDetails.SortCode.ShouldBe(account.SortCode); 
    savedAccountDetails.AccountNumber.ShouldBe(account.AccountNumber); 
    savedAccountDetails.Owner.Name.ShouldBe(person.Name
    ((Person)savedAccountDetails.Owner).DateOfBirth.ShouldBe(person.DateOfBirth);</code></pre>
}

This test will pick up both problems; the DateOfBirth property won't be set correctly and the serializer will prompt to add the <code>[KnownType(typeof(Person))]</code> attribute to the BankAccount class;

To aid re-use and reduce code clutter I've created some extension methods to serialize and de-serialize objects;
<pre style="padding-left:30px;"><code>public static class SerialisationExtensions
{
    public static Stream Serialize(this T target)
    {
        Stream storeStream = new MemoryStream();
        var serializer = new DataContractSerializer(typeof(T));
        serializer.WriteObject(storeStream, target);
        return storeStream;
    }

    public static T DeSerialize&lt;T&gt;(this Stream fromStream) where T: class
    {
        fromStream.Position = 0;
        var serializer = new DataContractSerializer(typeof(T));
        return serializer.ReadObject(fromStream) as T;
    }
}
</code></pre>
This reduces code duplication in my tests. The below methods;
<pre style="padding-left:30px;"><code>private void GivenAccountHasBeenSerialised()
{
    storeStream = new MemoryStream();
    serializer = new DataContractSerializer(typeof(BankAccount));
    serializer.WriteObject(storeStream, account);
} 

private void WhenDeserializingFromStream()
{
    storeStream.Position = 0;
    savedAccountDetails = this.serializer.ReadObject(storeStream) as BankAccount;
}
</code></pre>
are replaced with these;
<pre style="padding-left:30px;"><code>private void GivenAccountHasBeenSerialised()
{
   storeStream = account.Serialize();
}

private void WhenDeserializingFromStream()
{
    savedAccountDetails = storeStream.DeSerialize&lt;BancAccount&gt;();
}
</code></pre>
This makes these methods redundant and we could move this code back into the test.
<h2>What we learnt</h2>
Creating a comprehensive suite of integration and acceptance tests did prevent our team deploying broken software. However, these were slow running tests and slowed us down.

Finding a way of moving these tests from integration to unit tests enabled us to be faster by reducing our feedback loop.

I've still got some more work to do on testing serialization but this method is easier to understand and more reliable than testing that attributes exist on your classes.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>211</wp:post_id>
  <wp:post_date>2013-10-02 22:10:03</wp:post_date>
  <wp:post_date_gmt>2013-10-02 22:10:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testing-serialization-part-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.Net]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="serialization"><![CDATA[Serialization]]></category>
  <category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=20952117&stype=M&topic=5791292832828379136&type=U&a=30xP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/e1evsUJ6sm]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:20430620;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_reach</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:4780980;i:1;}s:2:"wp";a:1:{i:0;i:0;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>44</wp:comment_id>
    <wp:comment_author><![CDATA[Mistake proofing | Garfield Moore]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://garfieldmoore.co.uk/2013/10/18/mistake-proofing/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.179</wp:comment_author_IP>
    <wp:comment_date>2013-10-19 06:28:15</wp:comment_date>
    <wp:comment_date_gmt>2013-10-19 06:28:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In previous posts I described how I test serialization [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1382164096.004705905914306640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1382164286</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1382164287.103641986846923828125;s:7:"message";s:52:"garfieldmoore changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:13:"garfieldmoore";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-10-19 06:28:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Building a lab environment</title>
  <link>http://garfieldmoore.co.uk/2013/10/09/building-a-lab-environment/</link>
  <pubDate>Wed, 09 Oct 2013 20:55:04 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=274</guid>
  <description/>
  <content:encoded><![CDATA[I've been building a lab environment in Hyper-V and thought it would be interesting to write up my experience over a few blog posts.

My goal was to install a Sql Server cluster.  After a bit of investigation I came up with the below network design;

[caption id="attachment_295" align="aligncenter" width="131"]<a href="http://garfieldmoore.files.wordpress.com/2013/10/basiclabenv.jpg"><img class="size-medium wp-image-295" alt="Initial lab" src="http://garfieldmoore.files.wordpress.com/2013/10/basiclabenv.jpg?w=131" width="131" height="196" /></a> Initial lab[/caption]

MS Sql Server needs to be installed on a server with windows fail-over configured for clustering.  Windows Fail-over can only be configured on a server in a domain.

So we'll need to create 3 virtual machines, configuring one as a domain controller and join the other two to the domain we create.  

I've also included another server to configure as an ISCSI device so the clustered servers can have shared storage (a future blog post).  For now, we'll just concentrate on the 3 networked servers.

<strong>Creating a domain controller</strong>
<p lang="en-GB">Create a virtual machine called acme-dc and install Windows Server 2012.</p>
<p lang="en-GB">In hyper-v, open the virtual network manager</p>
<p lang="en-GB">Create a new virtual network . Call it  'acme internal' and set the connection type to 'internal only'.</p>
<p lang="en-GB">Once windows has installed, turn off the virtual machine, right click and select 'Settings...'</p>
<p lang="en-GB">In the settings dialog, select network adapter and add the 'acme internal' from the network list</p>
<p lang="en-GB">Start and connect to the virtual machine</p>
<p lang="en-GB">Hyper-v doesn't set the machine name to the one you gave the VM.  To see this type hostname at a command prompt and press enter.</p>
<p lang="en-GB">There are a number of ways we can rename the computer.  I prefer to do this in the power-shell command window;</p>

<pre>netdom /renamecomputer [machinename] /newname:acme-dc</pre>
<p lang="en-GB">Now we need to make this machine a domain controller.  To do this we need to add AD the Domain services role</p>
<p lang="en-GB">Open the server manager, select the manage menu and select 'Add roles and features'</p>
<p lang="en-GB">Select role based and click next. Click next on the following screen. Then select 'Active Directory Domain Services' on the roles screen and click next until you reach the install screen.  Select install.</p>
<p lang="en-GB">Once installed it should give you the option to 'promote server to domain controller' in the server manager dashboard.</p>
<p lang="en-GB">Now all we need to do is add a new forest called acme.com.</p>
<p lang="en-GB">This is done in the  'Active Directory Domains and Trusts' dialog from the server managers tools menu</p>
<p lang="en-GB"><strong>Setting a static IP</strong></p>
<p lang="en-GB">Before we add other servers to our network we'll need to give this server a static IP address.</p>
<p lang="en-GB">To do this open the network and sharing centre, click change adapter settings.This brings up a dialog that should have one adapter. rename this to 'internal'. Right click on the adapter and select properties.</p>
<p lang="en-GB">Find the IPv4 settings in the list and double click.  In the properties dialog, select 'Use the following IP address' and enter 10.10.0.1</p>
<p lang="en-GB">[TAB] past subnet and default gateway and select 'use the following DNS server address'. Enter 127.0.0.1.</p>
<p lang="en-GB">Click the ok button to save these settings, confirm the other dialogs and close network and sharing centre.</p>
<p lang="en-GB">We should now be able to ping ourselves by host name, localhost and ip address (use ping -4 to force the use of ipv4)</p>
<strong>Add a new server to the domain</strong>
<p lang="en-GB">Create a virtual machine called acme-svr-001 and install Windows Server 2012. You will need to install the enterprise or data-centre editions if you want to cluster these.</p>
<p lang="en-GB">Once windows has installed, turn off the virtual machine, right click and select 'Settings...'</p>
<p lang="en-GB">In the settings dialog, select network adapter and add the 'acme internal' from the network list</p>
<p lang="en-GB">Start and connect to the virtual machine</p>
<p lang="en-GB">Rename the computer as before; Open a powershell command window and type the following command;</p>

<pre>netdom /renamecomputer [machinename] /newname:acme-svr-001</pre>
<p lang="en-GB"><strong>Configure dns server</strong></p>
<p lang="en-GB">We'll give this a static IP again and configure the DNS server to be the domain controller;</p>
<p lang="en-GB">Open network and configure the server to have a static IP (10.10.0.x)</p>
<p lang="en-GB">Set the preferred dns server to the domain controllers IP address (10.10.0.1)</p>
<p lang="en-GB">Open a powershell command window to confirm you can ping the domain controller by IP and it's host name acme-dc</p>
<p lang="en-GB">Turn off windows firewall (this makes it easier to avoid firewall issues and this is only a lab)</p>
<p lang="en-GB"><strong>Joining the domain</strong></p>
<p lang="en-GB">Go back to server manager, select local computer and choose the workgroup link.</p>
<p lang="en-GB">This opens system properties.  Now click 'change'.</p>
<p lang="en-GB">Change the 'member of' from workgroup to domain and enter acme.com into the domain field.</p>
<p lang="en-GB">Click ok and it should confirm you have joined the domain.</p>
<p lang="en-GB">If it fails it is either a firewall or networking issue.  If it isn't a firewall issue check the IP addresses you configured and the network adapters added in the virtual machines settings.</p>
<p lang="en-GB">Breath a sigh of relief and repeat this for the number of servers you want in your network.</p>
<strong>Conclusion</strong>

We now have a domain controller and a number of servers that are on the same network and in the same domain.  In a future post I'll install windows failover and sql server clustering to finish my lab environment.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>274</wp:post_id>
  <wp:post_date>2013-10-09 20:55:04</wp:post_date>
  <wp:post_date_gmt>2013-10-09 20:55:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>building-a-lab-environment</wp:post_name>
  <wp:status>private</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hyper-v"><![CDATA[Hyper-V]]></category>
  <category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
  <category domain="post_tag" nicename="server-2008"><![CDATA[Server 2008]]></category>
  <category domain="post_tag" nicename="server-2012"><![CDATA[Server 2012]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=20952117&stype=M&topic=5793810687323013120&type=U&a=P40m]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/9J78BJ3Lpy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:20430620;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>BasicLabEnv</title>
  <link>http://garfieldmoore.co.uk/2013/10/09/building-a-lab-environment/basiclabenv/#main</link>
  <pubDate>Thu, 10 Oct 2013 11:42:16 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.files.wordpress.com/2013/10/basiclabenv.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Initial lab]]></excerpt:encoded>
  <wp:post_id>295</wp:post_id>
  <wp:post_date>2013-10-10 11:42:16</wp:post_date>
  <wp:post_date_gmt>2013-10-10 11:42:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>basiclabenv</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>274</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://garfieldmoore.files.wordpress.com/2013/10/basiclabenv.jpg</wp:attachment_url>
</item>
<item>
  <title>Mistake proofing</title>
  <link>http://garfieldmoore.co.uk/2013/10/18/mistake-proofing/</link>
  <pubDate>Fri, 18 Oct 2013 12:42:04 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=306</guid>
  <description/>
  <content:encoded><![CDATA[In previous posts I described how I <a href="http://garfieldmoore.co.uk/2013/10/02/testing-serialization-part-ii">test serialization</a> of objects.

However, I still forget to do this. So, I've written tests to remind me. This is an idea from Lean engineering called poka yoke (see http://en.wikipedia.org/wiki/Poka-yoke).

The concept is simple - make it impossible or hard for someone to make mistakes that go unnoticed.

I use the convention of putting all the classes that need to be serialized in a contracts namespace. This makes it simple to write a test to check all these classes are defined with the DataContract attribute.
<pre style="padding-left:30px;"><code>        [Test]
        public void All_classes_in_contract_namespace_should_implement_datacontract()
        {
            IList allClassesInContractsNamespace = ReflectionHelper.GetAllTypesWhere(x=&gt;x.Namespace.Contains("Contracts") &amp;&amp; x.IsClass).ToList();

            allClassesInContractsNamespace.Count.ShouldBeGreaterThan(0);

            foreach (object obj in allClassesInContractsNamespace)
            {
                var dataContract = obj.GetType().GetCustomAttributes(typeof(DataContractAttribute), false).OfType().FirstOrDefault();
                dataContract.ShouldNotBe(null);
            }
        }
</code></pre>
The ReflectionHelper extension method encapsulates how I'm using Autofac to get a list of types. This makes it simpler to re-use in my tests as well as change the method of reflecting over types in the future;
<pre style="padding-left:30px;"><code>public static IEnumerable GetAllTypesWhere(Func predicate)
        {
            var builder = new ContainerBuilder();
            builder.RegisterAssemblyTypes(typeof(Invoice).Assembly)
                   .Where(predicate.Invoke)
                   .As();

            IContainer container = builder.Build();
            var controllers = container.Resolve&lt;IEnumerable&gt;();

            return controllers;
        }
</code></pre>
This technique can be extended to any frequent mistake.
<h2>Conclusion</h2>
We have a lot of tools to help us not make mistakes; modern development tools help a lot. Third party tools exist such as re-sharper, style-cop, and FxCop. Our build systems run our unit tests and these static analysis tools.

We can take this further by writing tests that check for our most common mistakes.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>306</wp:post_id>
  <wp:post_date>2013-10-18 12:42:04</wp:post_date>
  <wp:post_date_gmt>2013-10-18 12:42:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mistake-proofing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="post_tag" nicename="net"><![CDATA[.Net]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="poka-yoke"><![CDATA[poka-yoke]]></category>
  <category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/NKFxGjzZNm]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:20430620;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=20952117&stype=M&topic=5796948732163399680&type=U&a=3amU]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Faking third party web services</title>
  <link>http://garfieldmoore.co.uk/2013/12/11/faking-third-party-web-services/</link>
  <pubDate>Wed, 11 Dec 2013 18:23:26 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=333</guid>
  <description/>
  <content:encoded><![CDATA[<p>I've worked on a number of projects that relied on third party web services or API's.  Most of these had a test service but didn't provide a way to return a predetermined response.</p><p>This left two choices when testing our software; call the test service or create a fake service of our own</p><h2>Third party test services</h2><p>Usually the purpose of a test service is to ensure that your production systems will work with their production systems.  So it is used for testing the integration of two systems.</p><p>This usually means the only difference is the data is not real or is a sub-set of the live data.  Using it still requires calls across service boundaries (HTTP), expensive computation and storage (like databases).</p><p>This creates a number of issues when executing an automated test suite for your software;</p><ul><li>Calls across services boundaries are expensive, resulting in slow tests and slow feedback</li><li>Tests will be brittle because the data can change, leading to different results over time</li><li>You may not have access even to the test service in the environment you are running your tests</li></ul><h2>Faking services</h2><p>The solution is invariably to create a fake service that can be configured to return a specific response.</p><p>I've done this a few times and without exception the solution has become a maintenance burden. Some  of the problems I've experienced are below;</p><ul><li>Fake is not re-usable across projects</li><li>Duplication of fakes across teams</li><li>Different fakes for different third party services</li></ul><p>This leads to a lot of duplication of effort and lost time.</p><h2>Proxy servers</h2><p>After realising this could be solved with a proxy server I created <a href="https://github.com/garfieldmoore/Boomerang">Boomerang</a> to make this easier.  This enables developers to set predetermined responses for HTTP requests.</p><p>For example, I can specify a json object should be returned from a GET for a specific relative address;</p><pre style="padding-left:30px;"><code>var dictionary = new Dictionary&lt;string, string&gt;() { { "content-type", "application/json" } };
Boomerang.Server(5100).Get("/api/products").Returns(products.SerialiseToJsonString(), 200, dictionary);
</code></pre><p>This creates a proxy server on port 5100 and specifies the response to a HTTP GET request to the relative uri /api/products should be a list of Products formatted as json.</p><p>I created an extension method to help with the json serialisation;</p><pre style="padding-left:30px;"><code>public static string SerialiseToJsonString(this object target)
        {
            string str;

            var dataContractJsonSerializer = new DataContractJsonSerializer(target.GetType());

            using (var mem = new MemoryStream())
            {
                dataContractJsonSerializer.WriteObject(mem, target);
                mem.Flush();
                mem.Position = 0;
                str = Encoding.Default.GetString(mem.ToArray());
                Console.WriteLine(str);
            }

            return str;
        }
</code></pre><h2>Conclusion</h2><p>GET, POST, PUT and delete are supported and the base address is ignored.  If <a href="https://github.com/garfieldmoore/Boomerang">Boomerang</a> receives a request it hasn't got a response for it will return an error response.</p><p>I hope this makes testing with third party services a bit easier!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>333</wp:post_id>
  <wp:post_date>2013-12-11 18:23:26</wp:post_date>
  <wp:post_date_gmt>2013-12-11 18:23:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>faking-third-party-web-services</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>1</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/104210547641993449129/posts/fACHL3V15kv]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"104210547641993449129";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/mybq1Gn8yZ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_988cd0a517618ab4418444dfeafdadb6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_efb0a22f6aa430f0b9a8b5eb67bafadd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9f9921d17c635341c267655554956816</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4d6a05d41e1826b988d1021b9232d9cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc5d4552d27e53108113b942fc1bfa70</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>HttpClient performance</title>
  <link>http://garfieldmoore.co.uk/2014/06/26/httpclient-performance/</link>
  <pubDate>Thu, 26 Jun 2014 16:52:30 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=348</guid>
  <description/>
  <content:encoded><![CDATA[I was able to dramatically improve the performance of HttpClient by removing one line of code. Take the below snippet;
<pre style="padding-left:30px;"> var httpClientHandler = new HttpClientHandler()
 {
      UseDefaultCredentials = true,
      PreAuthenticate = false,
      <span style="color:#ff0000;">ClientCertificateOptions = ClientCertificateOption.Automatic</span>
 };
 var webclient = new HttpClient(httpClientHandler);</pre>
The offending line of code is highlighted.

This code averaged 20 seconds per 100 requests. Using the default ClientCertificateOption.Manual this improved to 4 seconds.

I couldn't understand why this would be, so I cracked open HttpClient with <a title="JetBrains dotpeek" href="http://www.jetbrains.com/decompiler/." target="_blank">Jetbrains dotpeek</a> to take a closer look.

HttpClient eventually calls it's base class SendAsync method.  This calls SendAsync on the handler and it is here the importance of this property becomes clear.

The handler calls the private method CreateAndPrepareWebRequest().  This in turn calls the innocent sounding SetDefaultOptions(...) method where the below code lurks;
<pre style="padding-left:30px;"> X509CertificateCollection clientCertificates = UnsafeNclNativeMethods.NativePKI.FindClientCertificates();
 if (clientCertificates.Count &lt;= 0)
    return;
 webRequest.ClientCertificates = clientCertificates;</pre>
It turns out the FindClientCertificates() method enumerates the users certificate store <em>on every request</em>.

I found this amazing and it seems extremely wasteful.

I am still trying to figure out if there is a good reason why the certificate store couldn't be enumerated once and the certificate list stored for future requests.

But that's for another day!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>348</wp:post_id>
  <wp:post_date>2014-06-26 16:52:30</wp:post_date>
  <wp:post_date_gmt>2014-06-26 16:52:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>httpclient-performance</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/104210547641993449129/posts/K2ufMZNinoz]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"104210547641993449129";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/aMqKz0CeqK]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Mocking dangers</title>
  <link>http://garfieldmoore.co.uk/2014/07/16/mocking-dangers/</link>
  <pubDate>Wed, 16 Jul 2014 19:26:26 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=374</guid>
  <description/>
  <content:encoded><![CDATA[Mocking dependencies allow us to create tests that are fast by removing our dependencies on external systems.

However, it's easy to overuse and create brittle tests that become a maintenance burden.

For example, imagine we are creating a To-do list application. We might come up with the below simple design;

<a href="https://garfieldmoore.files.wordpress.com/2014/07/todo_design.png"><img class="aligncenter wp-image-383" style="border:0 solid #ffffff;" src="http://garfieldmoore.files.wordpress.com/2014/07/todo_design.png?w=300" alt="todo_design" width="415" height="260" /></a>

Given this design we might end up with tests similar to the ones below;
<pre style="padding-left:30px;"><code>public class TodoSpecs
{
    public class TodoSpecs
    [Test]
    public void Service_invokes_repository()
    {
        var repository = Substitute.For&lt;IRepository&gt;();
        var service = new ToDoService(repository, Substitute.For&lt;IMapper&lt;ToDoTask, TaskResource&gt;&gt;());
        service.GetAll();
        repository.Received(1).GetAll();
     }

     public void Service_should_return_resources()
     {
         var repository = Substitute.For&lt;IRepository&gt;();
         var toDoTask = new ToDoTask() { Note = "new todo task" };
         repository.GetAll().Returns(new[] { toDoTask });
         var mapper = Substitute.For&lt;IMapper&lt;ToDoTask, TaskResource&gt;&gt;();
         mapper.Map(Arg.Any()).Returns(new TaskResource() { Note = "new todo task" });
      
         var service = new ToDoService(repository, mapper);
         var todos = service.GetAll();
      
         &lt;mapper.Received(1).Map(Arg.Is(toDoTask));
         todos.Count().ShouldBe(1);
      }

      public void mapper_should_map_task_to_resource()
      {
          var mapper = new TaskResourceMapper();
          var task = new ToDoTask() { Note = "new todo task" };
          var resource = mapper.Map(task);
          resource.Note.ShouldBe(task.Note);
      }
}</code></pre>
These tests are trying to prove the service gets all tasks from the repository, converts them to a resource and returns them. At first glance this seems fine. The first test mocks the repository dependency and tests we call the getall() method. This is reasonable as the real repository will be going to a database of some kind.  If we didn't mock this we would have a slow integration test.
<h2>Brittle Tests</h2>
The problem is in the second test. The first smell that something is wrong it that the test is hard to understand. We have to mock two things - the repository and the mapper.

This means that any change to the mapper requires us to change our tests in two places; the tests that cover the mapper and the tests that create mock mappers.

Another problem is that to prove we return the correct result to the client, we are testing the collaboration between the mapper and the service. If we remove the mapper we have to change all our tests.
<h2>Testing from the outside</h2>
Now, imagine if we just tested this code from the service and treated the mapper as an internal object. We'd probably have something like this;
<pre style="padding-left:30px;"><code>
[TestFixture]
public class TodoSpecs2
{
    [TestFixture]
    [Test]
    public void Service_invokes_repository()
    {
        var repository = Substitute.For&lt;IRepository&lt;ToDoTask&gt;&gt;();
    
        var service = new ToDoService(repository);
        service.GetAll();
    
        repository.Received(1).GetAll();
    }

    public void Service_should_return_resources()
    {
        var repository = Substitute.For&lt;IRepository&lt;ToDoTask&gt;&gt;();
        var toDoTasks = Builder&lt;ToDoTask&gt;.CreateListOfSize(1).Build();    
        repository.GetAll().Returns(toDoTasks);

        var service = new ToDoService(repository);
        var todos = service.GetAll().ToList();

        todos.Count().ShouldBe(1);
        todos[0].Note.ShouldBe(toDoTasks[0].Note);
    }
}</code></pre>
We have removed the mapper from the services constructor and are not testing the mapper anymore. We are still using the mapper in the service but it is being created in the service.

As a result, the test is much more readable and nothing is lost - the mapper is still covered by this test. However, rather than testing it directly, requiring us to create unneeded dependencies and brittle tests, it is being tested as a side-effect of this test.

That's completely valid - the mapper is cheap to create and consume and it only collaborates privately with the service. We could refactor the code to remove the mapper and our test would still be be valid.
<h2>Conclusion</h2>
Overusing mocking creates brittle tests that will inhibit flexibility and decrease productivity. We should only mock objects that are expensive to create or use.

In the example, the mapper was cheap to create and use and did not need to be an external dependency. Treating it as private to the service resulted in more flexible and easier to understand tests.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>374</wp:post_id>
  <wp:post_date>2014-07-16 19:26:26</wp:post_date>
  <wp:post_date_gmt>2014-07-16 19:26:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mocking-dangers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>1</wp:is_sticky>
  <category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>todo_design</title>
  <link>http://garfieldmoore.co.uk/2014/07/16/mocking-dangers/todo_design/#main</link>
  <pubDate>Fri, 18 Jul 2014 11:17:56 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.files.wordpress.com/2014/07/todo_design.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>381</wp:post_id>
  <wp:post_date>2014-07-18 11:17:56</wp:post_date>
  <wp:post_date_gmt>2014-07-18 11:17:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>todo_design</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>374</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://garfieldmoore.files.wordpress.com/2014/07/todo_design.gif</wp:attachment_url>
</item>
<item>
  <title>todo_design</title>
  <link>http://garfieldmoore.co.uk/2014/07/16/mocking-dangers/todo_design-2/#main</link>
  <pubDate>Fri, 18 Jul 2014 11:21:45 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.files.wordpress.com/2014/07/todo_design.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>383</wp:post_id>
  <wp:post_date>2014-07-18 11:21:45</wp:post_date>
  <wp:post_date_gmt>2014-07-18 11:21:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>todo_design-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>374</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://garfieldmoore.files.wordpress.com/2014/07/todo_design.png</wp:attachment_url>
</item>
<item>
  <title>Testing emails</title>
  <link>http://garfieldmoore.co.uk/2014/12/18/testing-emails/</link>
  <pubDate>Thu, 18 Dec 2014 10:16:41 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=419</guid>
  <description/>
  <content:encoded><![CDATA[We've recently added email notifications to our application.  I really wanted to avoid configuring email servers or setting up email accounts to test our software. Luckily there are a number of tools to help with this for development, and testing.
<h2><strong>Development</strong></h2>
We're using .Net so we can configure our application to send all SMTP to a file directory. This can be done in the application configuration file with the below snippet;
<pre>&lt;system.net&gt;
    &lt;mailSettings&gt;
        &lt;smtp deliveryMethod="SpecifiedPickupDirectory"&gt;
            &lt;specifiedPickupDirectory pickupDirectoryLocation="c:\temp\mailbox\"/&gt;
        &lt;/smtp&gt;
   &lt;/mailSettings&gt;
&lt;/system.net&gt;
</pre>
Our acceptance tests relied on this mechanism to redirect SMTP traffic to the file system. We then had an interface in our automation framework to parse these files so we could easily check the contents.
<h2><strong>Component Testing</strong></h2>
For manual testing we wanted to avoid having to change the application configuration so looked for a simple way of setting up SMTP.

We decided to use an SMTP fake. There are a few open source project for this.  Two examples are <a href="https://smtp4dev.codeplex.com/">SMTP4Dev</a> and <a href="http://papercut.codeplex.com/">PaperCut</a>.

I use SMTP4Dev simply because I've used it before but will try papercut when I get some time.
<h2><strong>System Testing</strong></h2>
This is the only time we needed to have a real SMTP server configured.  For this we have a Dogfood environment that our operations department takes care of. Taking this approach completely removed the need to become experts in configuring email servers to test sending emails.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>419</wp:post_id>
  <wp:post_date>2014-12-18 10:16:41</wp:post_date>
  <wp:post_date_gmt>2014-12-18 10:16:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testing-emails</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>1</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/104210547641993449129/posts/64DbrjqqM9r]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"104210547641993449129";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/kaeehKT7eP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://garfieldmoore.co.uk/?p=427</link>
  <pubDate>Tue, 14 Apr 2015 13:42:48 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=427</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Thoughts on Test Driven Development</strong>

One of the benefits asserted of TDD is to provide fast feedback to developers so we can have confidence a change has not inadvertently broken some desired behaviour.

However, there seems to be a discrepancy between these purported benefits and what happens on real world projects.

This fast feedback and confidence in our changes should translate to improved productivity. Instead, all too often, I find tests that inhibit change.  It’s often hard to write tests.  In fact, quite often, the tests take an order of magnitude longer to write than does the code it supports.

So what’s going on?

<strong>Feedback loops</strong>

The use of feedback loops is crucial in engineering; systems components provide feedback that reinforces or reduces change.

There are two types of feedback loops; positive and negative.

Positive feedback loops reinforce change. One example of a positive feedback loop is a snowball rolling downhill. The more it travels downhill, the more snow it amasses, the more it travels downhill.  Positive feedback loops moves towards instability.

Negative feedback acts as a damper to, or prohibits, change.  An example is the cruise control in your car; as the terrain changes and your car goes downhill, picking up speed, your cruise-control will ease off the accelerator.  Negative feedback loops tend to move towards an equilibrium.

<strong>Tests as feedback loops</strong>

Tests can be seen as providing negative feedback by providing control over the development cycle; when a test breaks, you should stop and fix it.

However, tests are also providing feedback when you are writing them.  If it’s hard to write a test, your design is likely sub-optimal for the change you are trying to make.

If we ignore our tests it will become harder to work within our system over time.  It is easier to correct a problem with a few tests than with a lot of them.  Also, the effect of design flaws are accumulative; not fixing one now often leads to further incorrect design and bigger or perhaps just more problems later.

<strong>Conclusion</strong>

Tests are a control mechanism that provides feedback to the developer. They are an example of a negative feedback loop.

They provide feedback when they fail, indicating a change has an undesirable side effect.

However, they also provide feedback when developing the tests.  If it’s hard to write a test we should stop and consider if the system is telling us there is something is wrong with our design, given the change we are trying to make.

Negative feedback loops are most effective when used to apply a minor correction in a timely manner.

Therefore, when writing tests we should be conscious of how much effort it takes to write a test for our change.  If it’s increasingly hard to write tests, we should consider whether it’s time to refactor our design to better support our changes.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>427</wp:post_id>
  <wp:post_date>2015-04-14 13:42:48</wp:post_date>
  <wp:post_date_gmt>2015-04-14 13:42:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
</item>
<item>
  <title>What's the problem with TDD?</title>
  <link>http://garfieldmoore.co.uk/2015/05/12/whats-the-problem-with-tdd/</link>
  <pubDate>Tue, 12 May 2015 15:04:41 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=429</guid>
  <description/>
  <content:encoded><![CDATA[Have you ever worked on a system where the tests slow you down?

Do the tests break even with the smallest change?

Are the tests brittle?

Is it really hard to write a test? Lots of setup, mocks and expectations?

I've worked on these and I'm pretty sure I'm not alone.

So what's the problem with TDD?
<h2><strong>Feedback loops</strong></h2>
To understand the problem we have to understand feedback loops.

The use of feedback loops is crucial in engineering; the components in a system provide feedback that reinforces or reduces change.

There are two types of feedback loops; positive and negative.

<strong>Negative feedback</strong>

Negative feedback loops move systems towards stability.

Negative feedback loops act as a damper to, or prohibits, change.

An example of a negative feedback loop in engineering is the <a href="http://en.wikipedia.org/wiki/Centrifugal_governor">centrifugal governor</a>. This limits the speed of the engine by limiting fuel supply.

<strong>Positive feedback</strong>

Positive feedback loops moves systems towards instability.

Positive feedback loops reinforce change. A change reinforces itself and creates more of the same change.

An oscillator is an example of a positive feedback loop.
<h2><strong>Tests as a feedback loop</strong></h2>
In much the same way, unit tests are an example of a negative feedback loop.  When one breaks we stop and fix it. It is enforcing stability.

However, tests are also providing feedback when you are writing them. If it’s hard to write a test, your design is likely sub-optimal for the change you are trying to make.

For example, if there are lots of dependencies to mock and expectations to set up, we may have missed a needed abstraction that combines them.

The longer we put up with tests that are getting harder to write, the more our software degrades.
<h2><strong>Designing feedback loops</strong></h2>
We have to be careful how we design our feedback loops. If our tests are too fine grained our feedback loop will be too tight, limiting the changes we can make to our system. This will reduce our ability to change our software.

We need the feedback to ensure we haven't broken anything while at the same time we want to be able to change the implementation details of our software.
<h2><strong>Conclusion</strong></h2>
Our tests are feedback loops, telling us, not only when changes are wrong, but also when our changes cannot easily be supported in the design.

If we ignore our tests it will become harder to work within our system over time.

We need to be careful how fine grained we make our tests; too fine and we won't be able to change our software. Not fine enough and we will inadvertently break some behaviour of our software.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>429</wp:post_id>
  <wp:post_date>2015-05-12 15:04:41</wp:post_date>
  <wp:post_date_gmt>2015-05-12 15:04:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>whats-the-problem-with-tdd</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>1</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="post_tag" nicename="bdd"><![CDATA[BDD]]></category>
  <category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/104210547641993449129/posts/iiUKVDjCPsm]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"104210547641993449129";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/unZC5gLOpy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_linkedin_publicize_failure</wp:meta_key>
    <wp:meta_value><![CDATA[O:13:"Keyring_Error":2:{s:6:"errors";a:1:{s:21:"keyring-request-error";a:1:{i:0;a:5:{s:7:"headers";a:11:{s:6:"server";s:17:"Apache-Coyote/1.1";s:15:"x-li-request-id";s:10:"D5BDHJRIRD";s:4:"date";s:29:"Tue, 12 May 2015 15:04:45 GMT";s:4:"vary";s:1:"*";s:11:"x-li-format";s:4:"json";s:12:"content-type";s:30:"application/json;charset=UTF-8";s:16:"content-encoding";s:4:"gzip";s:11:"x-li-fabric";s:9:"prod-ltx1";s:8:"x-li-pop";s:9:"prod-ltx1";s:9:"x-li-uuid";s:24:"kvMT8uaB3RPwCr74yyoAAA==";s:10:"set-cookie";s:154:"lidc="b=TB17:g=126:u=64:i=1431443085:t=1431511238:s=AQEStmZeFG-_bFTlSiIeTqlrm8-od0st"; Expires=Wed, 13 May 2015 10:00:38 GMT; domain=.linkedin.com; Path=/";}s:4:"body";s:175:"{
  "errorCode": 0,
  "message": "[unauthorized]. Expired access token. Timestamp: 1410868637200",
  "requestId": "D5BDHJRIRD",
  "status": 401,
  "timestamp": 1431443085563
}";s:8:"response";a:2:{s:4:"code";i:401;s:7:"message";s:12:"Unauthorized";}s:7:"cookies";a:1:{i:0;O:14:"WP_Http_Cookie":5:{s:4:"name";s:4:"lidc";s:5:"value";s:80:""b=TB17:g=126:u=64:i=1431443085:t=1431511238:s=AQEStmZeFG-_bFTlSiIeTqlrm8-od0st"";s:7:"expires";i:1431511238;s:4:"path";s:1:"/";s:6:"domain";s:13:".linkedin.com";}}s:8:"filename";N;}}}s:10:"error_data";a:0:{}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_linkedin_publicize_failure</wp:meta_key>
    <wp:meta_value><![CDATA[O:13:"Keyring_Error":2:{s:6:"errors";a:1:{s:21:"keyring-request-error";a:1:{i:0;a:5:{s:7:"headers";a:11:{s:6:"server";s:17:"Apache-Coyote/1.1";s:15:"x-li-request-id";s:10:"PDFUWGET1U";s:4:"date";s:29:"Tue, 12 May 2015 15:06:03 GMT";s:4:"vary";s:1:"*";s:11:"x-li-format";s:4:"json";s:12:"content-type";s:30:"application/json;charset=UTF-8";s:16:"content-encoding";s:4:"gzip";s:11:"x-li-fabric";s:9:"prod-ltx1";s:8:"x-li-pop";s:9:"PROD-ELA4";s:9:"x-li-uuid";s:24:"DmMIEfmB3RNQx2c8wioAAA==";s:10:"set-cookie";s:154:"lidc="b=TB17:g=126:u=64:i=1431443163:t=1431511238:s=AQFRN-TrVgacqGEVynmhaWYtdnNPsCV5"; Expires=Wed, 13 May 2015 10:00:38 GMT; domain=.linkedin.com; Path=/";}s:4:"body";s:175:"{
  "errorCode": 0,
  "message": "[unauthorized]. Expired access token. Timestamp: 1410868637200",
  "requestId": "PDFUWGET1U",
  "status": 401,
  "timestamp": 1431443163430
}";s:8:"response";a:2:{s:4:"code";i:401;s:7:"message";s:12:"Unauthorized";}s:7:"cookies";a:1:{i:0;O:14:"WP_Http_Cookie":5:{s:4:"name";s:4:"lidc";s:5:"value";s:80:""b=TB17:g=126:u=64:i=1431443163:t=1431511238:s=AQFRN-TrVgacqGEVynmhaWYtdnNPsCV5"";s:7:"expires";i:1431511238;s:4:"path";s:1:"/";s:6:"domain";s:13:".linkedin.com";}}s:8:"filename";N;}}}s:10:"error_data";a:0:{}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204936942076669]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11337921</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=20952117&stype=M&topic=6004241923794096128&type=U&a=Kd29]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>288</wp:comment_id>
    <wp:comment_author><![CDATA[Kashan Arshad]]></wp:comment_author>
    <wp:comment_author_email>zkashan@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/zkashan</wp:comment_author_url>
    <wp:comment_author_IP>86.171.20.147</wp:comment_author_IP>
    <wp:comment_date>2015-05-13 18:44:04</wp:comment_date>
    <wp:comment_date_gmt>2015-05-13 18:44:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[An example of negative feedback loop I've observed is when it becomes hard to write new tests due to the amount of setup and steps required (so it's turning into a non-unit test), or copy pasting huge chunks of unit test to only modify 2 or 3 lines that the differences between tests look subtle takes the show away from what is being tested.

Integrating feedback loop into our development I think should help keep testing easier (and keep in check writing code and then testing that this could lead to).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1431542645.0786590576171875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"zkashan";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1431542645</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1431546437</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1431546437.96601009368896484375;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"garfieldmoore";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Home</title>
  <link>http://garfieldmoore.co.uk/?p=460</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=460</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>460</wp:post_id>
  <wp:post_date>2015-05-13 17:44:41</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://garfieldmoore.co.uk/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1431539081]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[460]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://garfieldmoore.co.uk/?p=461</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=461</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>461</wp:post_id>
  <wp:post_date>2015-05-13 17:44:41</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1431539081]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Code tag cloud</title>
  <link>http://garfieldmoore.co.uk/2015/05/20/project-tag-cloud/</link>
  <pubDate>Wed, 20 May 2015 08:51:53 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=463</guid>
  <description/>
  <content:encoded><![CDATA[I thought it would be a bit of fun to pass my code through a tag cloud creator. I thought it might give some insights into the domain language.

I used <a href="https://github.com/garfieldmoore/Boomerang">Boomerang</a> for this experiment.

I merged the projects class files into one on the command line;
<pre style="padding-left:30px;"><code>
    for /r ".\boomerang.host" %f in (*.cs) do type %f &gt;&gt;merged_code.txt
</code>
</pre>
Then when over to <a href="http://www.tagcrowd.com/">TagCrowd.com</a> and created the image below.

<a href="https://garfieldmoore.files.wordpress.com/2015/05/boomerang_tag_cloud.gif"><img class="aligncenter wp-image-383" style="border:0 solid #ffffff;" src="http://garfieldmoore.files.wordpress.com/2015/05/boomerang_tag_cloud.gif?w=300" alt="Tag cloud image" width="404" height="253" /></a>

I didn't learn much about my project but it was a bit of fun and maybe I'll do some renaming the next time I'm in the code.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>463</wp:post_id>
  <wp:post_date>2015-05-20 08:51:53</wp:post_date>
  <wp:post_date_gmt>2015-05-20 08:51:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>project-tag-cloud</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204984910755856]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11337921</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1034289588;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/104210547641993449129/posts/Pd6kzc6SSyy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/3dIYAZY7pt]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=20952117&stype=M&topic=6006712753052536832&type=U&a=J9ob]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_11337921</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>boomerang_tag_cloud</title>
  <link>http://garfieldmoore.co.uk/2015/05/20/project-tag-cloud/boomerang_tag_cloud/#main</link>
  <pubDate>Wed, 20 May 2015 08:44:37 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.files.wordpress.com/2015/05/boomerang_tag_cloud.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>465</wp:post_id>
  <wp:post_date>2015-05-20 08:44:37</wp:post_date>
  <wp:post_date_gmt>2015-05-20 08:44:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>boomerang_tag_cloud</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>463</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://garfieldmoore.files.wordpress.com/2015/05/boomerang_tag_cloud.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Tag cloud image]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Getting started with puppet</title>
  <link>http://garfieldmoore.co.uk/2015/07/05/getting-started-with-puppet/</link>
  <pubDate>Sun, 05 Jul 2015 13:26:02 +0000</pubDate>
  <dc:creator>garfieldmoore</dc:creator>
  <guid isPermaLink="false">http://garfieldmoore.co.uk/?p=475</guid>
  <description/>
  <content:encoded><![CDATA[<p>I've recently started using <a href="https://puppetlabs.com/">Puppet</a>.&nbsp; One of the things I first struggled with was creating a <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">hello world application</a>.</p> <p>If you look at the <a href="http://docs.puppetlabs.com/pe/latest/quick_start.html">getting started documentation</a> you are pointed to a <a href="http://docs.puppetlabs.com/pe/latest/quick_start_helloworld.html">Puppet hello world</a>.&nbsp; This&nbsp; was promising but turned out to be more complicated than I had hoped as it was configuring a client and a server.</p> <h2>Puppet Standalone</h2> <p>The installation guide mentioned <a href="http://docs.puppetlabs.com/guides/install_puppet/pre_install.html#standalone-puppet">Puppet Standalone</a>. This sounded like what I wanted but I couldn’t find any other information about installing in this mode.</p> <p>This isn’t surprising as the documentation is aimed at enterprise use and this wouldn’t be valuable in that context.</p> <h2>Install Standalone puppet</h2> <p>After some trial and error I realised that to install standalone puppet you simply download the puppet agent MSI.</p> <p>Once installed, we just need to write a script to do something.&nbsp; The simplest thing I could think of is to create a folder and write a file into the new folder.</p> <h2>Hello World Script</h2> <p><span style="font-family:cou;">Puppet declares the steps to set up a machine in <a href="https://docs.puppetlabs.com/puppet/latest/reference/lang_classes.html">puppet classes</a>.&nbsp; Once I found an example the file type on <a href="http://www.puppetcookbook.com/posts/creating-a-directory.html">Puppet Cookbooks</a> it was pretty simple to create this script;</span></p> <blockquote><pre><p>class MyFirstScript{</p><p>    file{'c:\HelloWorld\hellowWorld.txt':&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p><p>        ensure =&gt;file,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p><p>        content =&gt; 'Hello world!',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p><p>    }</p><p>
</p><p>    file{"c:\HelloWorld":<br />        ensure =&gt;"directory",</p><p>    }</p><p>}</p><p>include MyFirstScript</p></pre></blockquote>
<blockquote>
<p>Save this as MyFirstScript.pp.&nbsp; pp is the extension used for puppet scripts.</p>
<p>The script creates a file called hellowWorld.txt in the c:\HelloWorld folder and adds some content to the file.</p>
<h2>Running the script</h2>
<p>Now we’re going to check the script is valid and execute the script.</p>
<p>Open a command window and use the puppet command to check the syntax of the script;</p>
<blockquote><pre>puppet parser validate MyFirstScript.pp</pre></blockquote>
<p>Now to run this locally at the command line.</p>
<blockquote><pre>puppet apply MyfirstScript.pp</pre></blockquote>
<p>You should now be able to&nbsp; navigate to the file to check it’s been created.</p>
<h2>Next steps</h2>
<p>This isn’t particularly useful but it shows how to install and run your first script in puppet.</p>
<p>Puppet labs have some great resources to <a href="https://learn.puppetlabs.com/category/self-paced-training">learn</a> about puppet and there are plenty of <a href="https://forge.puppetlabs.com/?_ga=1.208143442.196027094.1436091548">example modules</a> and <a href="http://www.puppetcookbook.com/">cookbooks</a>.</p></blockquote>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>475</wp:post_id>
  <wp:post_date>2015-07-05 13:26:02</wp:post_date>
  <wp:post_date_gmt>2015-07-05 13:26:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>getting-started-with-puppet</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>1</wp:is_sticky>
  <category domain="post_tag" nicename="devops"><![CDATA[devops]]></category>
  <category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[20508111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:4780980;s:59:"https://twitter.com/garfieldmoore/status/617685882200403968";}s:8:"facebook";a:1:{i:11337921;s:38:"https://facebook.com/10205380374042191";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12382328597]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_4856175</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4780980</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[garfieldmoore]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=20952117&stype=M&topic=6023451575974977536&type=U&a=hNym]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_4856593</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4781430</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/104210547641993449129/posts/HdKj6Py4Noy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5027555</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_4964787</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11273773</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11337921</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
